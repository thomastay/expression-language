// Code generated by "stringer -type Instruction"; DO NOT EDIT.

package bytecode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpConst-0]
	_ = x[OpLoad-1]
	_ = x[OpAdd-2]
	_ = x[OpMinus-3]
	_ = x[OpMul-4]
	_ = x[OpDiv-5]
	_ = x[OpFloorDiv-6]
	_ = x[OpAnd-7]
	_ = x[OpMod-8]
	_ = x[OpPow-9]
	_ = x[OpLt-10]
	_ = x[OpGt-11]
	_ = x[OpGe-12]
	_ = x[OpLe-13]
	_ = x[OpEq-14]
	_ = x[OpNe-15]
	_ = x[OpUnaryNot-16]
	_ = x[OpUnaryPlus-17]
	_ = x[OpUnaryMinus-18]
	_ = x[OpAddImm-19]
	_ = x[OpMinusImm-20]
	_ = x[OpMulImm-21]
	_ = x[OpDivImm-22]
	_ = x[OpFloorDivImm-23]
	_ = x[OpLoadAttr-24]
	_ = x[OpReturn-25]
	_ = x[OpCall-26]
	_ = x[OpBr-27]
	_ = x[OpBrIf-28]
	_ = x[OpBrIfOrPop-29]
	_ = x[OpBrIfFalseOrPop-30]
	_ = x[OpNewArray-31]
	_ = x[OpLoadSubscript-32]
}

const _Instruction_name = "OpConstOpLoadOpAddOpMinusOpMulOpDivOpFloorDivOpAndOpModOpPowOpLtOpGtOpGeOpLeOpEqOpNeOpUnaryNotOpUnaryPlusOpUnaryMinusOpAddImmOpMinusImmOpMulImmOpDivImmOpFloorDivImmOpLoadAttrOpReturnOpCallOpBrOpBrIfOpBrIfOrPopOpBrIfFalseOrPopOpNewArrayOpLoadSubscript"

var _Instruction_index = [...]uint8{0, 7, 13, 18, 25, 30, 35, 45, 50, 55, 60, 64, 68, 72, 76, 80, 84, 94, 105, 117, 125, 135, 143, 151, 164, 174, 182, 188, 192, 198, 209, 225, 235, 250}

func (i Instruction) String() string {
	if i >= Instruction(len(_Instruction_index)-1) {
		return "Instruction(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Instruction_name[_Instruction_index[i]:_Instruction_index[i+1]]
}
